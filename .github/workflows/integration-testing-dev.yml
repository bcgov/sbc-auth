name: Integration Testing DEV

on:
  schedule:
    # At minute 1 past every 4th hour.
    - cron: "01 */4 * * *"

jobs:
  setup-job:
    runs-on: ubuntu-latest
    if: github.repository == 'bcgov/sbc-auth'

    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('./integration-tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  basic-account:
    needs: setup-job
    runs-on: ubuntu-latest

    env:
      TAG_NAME: dev
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set Environement Variables
        run: |
          ./scripts/install_tools.sh
          op --version
          vaults='[{"vault": "relationship","application": ["integration-test"]}]'
          ./scripts/1pass_env.sh ${{ secrets.op_parameters }} -e "${TAG_NAME}" -v "${vaults}"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Run test
        working-directory: ./integration-tests
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest -x --suppress-no-test-exit-code --suppress-tests-failed-exit-code tests/suites/test_basic_account.py --junitxml=basic_account.xml
      - uses: actions/upload-artifact@v2
        with:
          name: test-result-artifact
          path: ./integration-tests/basic_account.xml

  premium_account:
    needs: setup-job
    runs-on: ubuntu-latest

    env:
      TAG_NAME: dev
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set Environement Variables
        run: |
          ./scripts/install_tools.sh
          op --version
          vaults='[{"vault": "relationship","application": ["integration-test"]}]'
          ./scripts/1pass_env.sh ${{ secrets.op_parameters }} -e "${TAG_NAME}" -v "${vaults}"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Run test
        working-directory: ./integration-tests
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest -x --suppress-no-test-exit-code --suppress-tests-failed-exit-code tests/suites/test_premium_account.py --junitxml=premium_account.xml
      - uses: actions/upload-artifact@v2
        with:
          name: test-result-artifact
          path: ./integration-tests/premium_account.xml

  out-of-province:
    needs: setup-job
    runs-on: ubuntu-latest

    env:
      TAG_NAME: dev
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set Environement Variables
        run: |
          ./scripts/install_tools.sh
          op --version
          vaults='[{"vault": "relationship","application": ["integration-test"]}]'
          ./scripts/1pass_env.sh ${{ secrets.op_parameters }} -e "${TAG_NAME}" -v "${vaults}"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Run test
        working-directory: ./integration-tests
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest -x --suppress-no-test-exit-code --suppress-tests-failed-exit-code tests/suites/test_out_of_province.py --junitxml=out_of_province.xml
      - uses: actions/upload-artifact@v2
        with:
          name: test-result-artifact
          path: ./integration-tests/out_of_province.xml

  staff:
    needs: setup-job
    runs-on: ubuntu-latest

    env:
      TAG_NAME: dev
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set Environement Variables
        run: |
          ./scripts/install_tools.sh
          op --version
          vaults='[{"vault": "relationship","application": ["integration-test"]}]'
          ./scripts/1pass_env.sh ${{ secrets.op_parameters }} -e "${TAG_NAME}" -v "${vaults}"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Run test
        working-directory: ./integration-tests
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest -x --suppress-no-test-exit-code --suppress-tests-failed-exit-code tests/suites/test_staff.py --junitxml=staff.xml
      - uses: actions/upload-artifact@v2
        with:
          name: test-result-artifact
          path: ./integration-tests/staff.xml

  anonymouse:
    needs: setup-job
    runs-on: ubuntu-latest

    env:
      TAG_NAME: dev
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set Environement Variables
        run: |
          ./scripts/install_tools.sh
          op --version
          vaults='[{"vault": "relationship","application": ["integration-test"]}]'
          ./scripts/1pass_env.sh ${{ secrets.op_parameters }} -e "${TAG_NAME}" -v "${vaults}"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('./integration-tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip--
      - name: Run test
        working-directory: ./integration-tests
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest -x --suppress-no-test-exit-code --suppress-tests-failed-exit-code tests/suites/test_anonymous.py --junitxml=anonymous.xml
      - uses: actions/upload-artifact@v2
        with:
          name: test-result-artifact
          path: ./integration-tests/anonymous.xml

  analysis-test-results:
    needs: [basic-account, premium_account, out-of-province, staff, anonymouse]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v2
        with:
          name: test-result-artifact
          path: ./integration-tests/test_results
      - name: analysis results
        id: analysis
        working-directory: ./integration-tests
        run: |
          ls -l
          pip install junitparser
          output=$(python analysis_test_results.py)
          echo "::set-output name=summary::$output"
      - uses: LouisBrunner/checks-action@v0.1.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Test results
          conclusion: failure
          output: '{ "summary": "${{ steps.analysis.outputs.summary }}" }'
          annotations: ${{ steps.annotations.outputs.summary }}
