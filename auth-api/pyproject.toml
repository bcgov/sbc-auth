[tool.poetry]
name = "auth-api"
version = "3.0.9"
description = ""
authors = ["\"BC Registries and Online Services\""]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
flask-cors = "^6.0.0"
flask-migrate = "^4.0.7"
flask-moment = "^1.0.6"
flask-sqlalchemy = "^3.1.1"
flask-marshmallow = "^1.2.1"
gunicorn = "^23.0.0"
google-cloud-core = "2.4.3"
google-cloud-storage = "3.0.0"
google-cloud-pubsub = "2.29.0"
pg8000 = "^1.31.2"
flask-mail = "^0.10.0"
bcrypt = "^4.2.0"
pyhumps = "^3.8.0"
marshmallow-sqlalchemy = "^1.0.0"
flask-caching = { git = "https://github.com/pallets-eco/flask-caching.git", branch = "master" }
cachelib = "^0.13.0"
aiohttp = "^3.12.14"
cattrs = "^23.2.3"
orjson = "^3.10.7"
sqlalchemy-utils = "^0.41.2"
pytz = "^2024.2"
marshmallow = "<4.0.0"
attrs = "24.2.0"
CacheControl = "0.14.0"
cachetools = "5.5.0"
certifi = "2024.8.30"
flask = "3.0.2"
itsdangerous = "2.1.2"
jinja2 = "^3.1.5"
jsonschema = "4.17.3"
launchdarkly-server-sdk = "9.5.0"
MarkupSafe = "2.1.1"
python-dotenv = "^1.0.1"
requests = "2.32.4"
Werkzeug = "^3.0.0"

# VCS dependencies
sql-versioning = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/sql-versioning", branch = "add_column_exclusion" }
flask-jwt-oidc = {git = "https://github.com/seeker25/flask-jwt-oidc.git", branch = "main" }
sbc-common-components = { git = "https://github.com/bcgov/sbc-common-components.git", rev = "master", subdirectory = "python" }
cloud-sql-connector = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/cloud-sql-connector", branch = "main" }
gcp-queue = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/gcp-queue", branch = "main" }
structured-logging = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/structured-logging", branch = "main" }

[tool.poetry.group.test.dependencies]
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"
faker = "^25.9.2"
freezegun = "^1.5.1"
pytest-asyncio = "^0.23.8"
lovely-pytest-docker = "^0.3.1"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.9"
ruff = "^0.14.1"

[tool.bandit]
exclude_dirs = [".venv","tests"]
skips = ["B104"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "devops",
    ".history",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors  
    "E9",      # pycodestyle errors
    "F",       # pyflakes
    "W",       # pycodestyle warnings
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
    "ARG",     # unused-function-argument
    "D",       # pydocstyle
    "I",       # isort
    "N",       # pep8-naming
    "Q",       # flake8-quotes
    "S",       # flake8-bandit
    "T",       # flake8-type-checking
    "TCH",     # flake8-type-checking
    "TID",     # flake8-tidy-imports
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = ["PLR2004", "S101", "TID252", "ARG001", "B006", "B008", "S311", "T201"]
# Allow magic values in tests
"**/test_*.py" = ["PLR2004", "S101", "TID252", "ARG001", "B006", "B008", "S311", "T201"]
# Allow magic values in conftest.py
"conftest.py" = ["PLR2004", "S101", "TID252", "ARG001", "B006", "B008", "S311", "T201"]
# Allow magic values in migrations
"migrations/**/*.py" = ["PLR2004", "S101", "TID252"]
# Allow magic values in devops
"devops/**/*.py" = ["PLR2004", "S101", "TID252"]
# Allow unused imports in __init__.py and ignore N999 (invalid module name)
"__init__.py" = ["F401", "N999"]

[tool.ruff.lint.isort]
known-first-party = ["pay_api"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/auth_api",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"
