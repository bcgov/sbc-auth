"""empty message

Revision ID: 48bd1f6e6c99
Revises: 8d3f85a7dfb3
Create Date: 2019-07-18 14:48:26.535116

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "48bd1f6e6c99"
down_revision = "8d3f85a7dfb3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "entity",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("coop_entity_id", sa.Integer(), nullable=False),
        sa.Column("business_phone", sa.String(length=15), nullable=True),
        sa.Column("business_email", sa.String(length=50), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("coop_entity_id"),
    )
    op.create_table(
        "membership_type",
        sa.Column("code", sa.String(length=15), nullable=False),
        sa.Column("desc", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("code"),
    )
    op.create_table(
        "org_status",
        sa.Column("code", sa.String(length=15), nullable=False),
        sa.Column("desc", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("code"),
    )
    op.create_table(
        "org_type",
        sa.Column("code", sa.String(length=15), nullable=False),
        sa.Column("desc", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("code"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "payment_type",
        sa.Column("code", sa.String(length=15), nullable=False),
        sa.Column("desc", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("code"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "org",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("last_modified", sa.DateTime(), nullable=True),
        sa.Column("last_modified_by", sa.Integer(), nullable=False),
        sa.Column("type_code", sa.String(length=15), nullable=False),
        sa.Column("status_code", sa.String(length=15), nullable=False),
        sa.Column("name", sa.String(length=250), nullable=True),
        sa.Column("address", sa.String(length=250), nullable=True),
        sa.Column("preferred_payment", sa.String(length=15), nullable=False),
        sa.ForeignKeyConstraint(["created_by"], ["user.id"]),
        sa.ForeignKeyConstraint(["last_modified_by"], ["user.id"]),
        sa.ForeignKeyConstraint(["preferred_payment"], ["payment_type.code"]),
        sa.ForeignKeyConstraint(["status_code"], ["org_status.code"]),
        sa.ForeignKeyConstraint(["type_code"], ["org_type.code"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_org_address"), "org", ["address"], unique=False)
    op.create_index(op.f("ix_org_name"), "org", ["name"], unique=False)
    op.create_table(
        "membership",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user", sa.Integer(), nullable=False),
        sa.Column("org", sa.Integer(), nullable=False),
        sa.Column("membership_type", sa.String(length=15), nullable=False),
        sa.ForeignKeyConstraint(["membership_type"], ["membership_type.code"]),
        sa.ForeignKeyConstraint(["org"], ["org.id"]),
        sa.ForeignKeyConstraint(["user"], ["user.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index("ix_users_username", table_name="users")

    op.drop_table("action_log")

    op.drop_table("action")

    op.add_column("affiliation", sa.Column("created", sa.DateTime(), nullable=True))
    op.add_column("affiliation", sa.Column("created_by", sa.Integer(), nullable=False))
    op.add_column("affiliation", sa.Column("entity", sa.Integer(), nullable=False))
    op.add_column("affiliation", sa.Column("id", sa.Integer(), nullable=False))
    op.add_column("affiliation", sa.Column("org", sa.Integer(), nullable=False))
    op.drop_constraint("affiliation_user_fkey", "affiliation", type_="foreignkey")
    op.drop_constraint("affiliation_business_fkey", "affiliation", type_="foreignkey")
    op.drop_constraint(
        "affiliation_affiliation_status_fkey", "affiliation", type_="foreignkey"
    )
    op.drop_table("users")
    op.drop_table("user_type")
    op.drop_table("affiliation_business")
    op.drop_table("affiliation_status")
    op.create_foreign_key(None, "affiliation", "org", ["org"], ["id"])
    op.create_foreign_key(None, "affiliation", "entity", ["entity"], ["id"])
    op.create_foreign_key(None, "affiliation", "user", ["created_by"], ["id"])
    op.drop_column("affiliation", "effective_start_date")
    op.drop_column("affiliation", "created_by_userid")
    op.drop_column("affiliation", "affiliation_id")
    op.drop_column("affiliation", "creation_date")
    op.drop_column("affiliation", "effective_end_date")
    op.drop_column("affiliation", "user_id")
    op.drop_column("affiliation", "modified_by_userid")
    op.drop_column("affiliation", "business_id")
    op.drop_column("affiliation", "affiliation_status_code")
    op.drop_column("affiliation", "last_access_date")
    op.add_column("user", sa.Column("created", sa.DateTime(), nullable=True))
    op.add_column("user", sa.Column("email", sa.String(length=200), nullable=True))
    op.add_column("user", sa.Column("first_name", sa.String(length=200), nullable=True))
    op.add_column(
        "user",
        sa.Column("keycloak_guid", postgresql.UUID(as_uuid=True), nullable=False),
    )
    op.add_column("user", sa.Column("last_name", sa.String(length=200), nullable=True))
    op.add_column("user", sa.Column("modified", sa.DateTime(), nullable=True))
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=False)
    op.create_index(op.f("ix_user_first_name"), "user", ["first_name"], unique=False)
    op.create_index(op.f("ix_user_last_name"), "user", ["last_name"], unique=False)
    op.create_unique_constraint(None, "user", ["keycloak_guid"])
    op.drop_column("user", "roles")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user",
        sa.Column("roles", sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "user", type_="unique")
    op.drop_index(op.f("ix_user_last_name"), table_name="user")
    op.drop_index(op.f("ix_user_first_name"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_column("user", "modified")
    op.drop_column("user", "last_name")
    op.drop_column("user", "keycloak_guid")
    op.drop_column("user", "first_name")
    op.drop_column("user", "email")
    op.drop_column("user", "created")
    op.add_column(
        "affiliation",
        sa.Column("last_access_date", sa.DATE(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "affiliation",
        sa.Column(
            "affiliation_status_code",
            sa.VARCHAR(length=5),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "affiliation",
        sa.Column("business_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "affiliation",
        sa.Column(
            "modified_by_userid", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "affiliation",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "affiliation",
        sa.Column("effective_end_date", sa.DATE(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "affiliation",
        sa.Column("creation_date", sa.DATE(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "affiliation",
        sa.Column("affiliation_id", sa.INTEGER(), autoincrement=True, nullable=False),
    )
    op.add_column(
        "affiliation",
        sa.Column(
            "created_by_userid", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "affiliation",
        sa.Column(
            "effective_start_date", sa.DATE(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "affiliation", type_="foreignkey")
    op.drop_constraint(None, "affiliation", type_="foreignkey")
    op.drop_constraint(None, "affiliation", type_="foreignkey")
    op.create_foreign_key(
        "affiliation_affiliation_status_fkey",
        "affiliation",
        "affiliation_status",
        ["affiliation_status_code"],
        ["status_code"],
    )
    op.create_foreign_key(
        "affiliation_business_fkey",
        "affiliation",
        "affiliation_business",
        ["business_id"],
        ["business_id"],
    )
    op.create_foreign_key(
        "affiliation_user_fkey", "affiliation", "users", ["user_id"], ["user_id"]
    )
    op.drop_column("affiliation", "org")
    op.drop_column("affiliation", "id")
    op.drop_column("affiliation", "entity")
    op.drop_column("affiliation", "created_by")
    op.drop_column("affiliation", "created")
    op.create_table(
        "action_log",
        sa.Column("log_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "action_code", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("target_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "target_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("action_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("memo", sa.VARCHAR(length=250), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["action_code"], ["action.action_code"], name="action_log_action_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.user_id"], name="action_log_user_fkey"
        ),
        sa.PrimaryKeyConstraint("log_id", name="log_pkey"),
    )
    op.create_table(
        "action",
        sa.Column(
            "action_code", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "action_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "action_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column("path", sa.VARCHAR(length=500), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("action_code", name="action_pkey"),
    )
    op.create_table(
        "affiliation_business",
        sa.Column("business_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "corp_num", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column(
            "corp_type", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("business_id", name="affiliation_business_pkey"),
    )
    op.create_table(
        "users",
        sa.Column("user_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "username", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column("passwd", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "firstname", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "lastname", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
        sa.Column(
            "display_name", sa.VARCHAR(length=254), autoincrement=False, nullable=True
        ),
        sa.Column("email", sa.VARCHAR(length=254), autoincrement=False, nullable=True),
        sa.Column(
            "user_source", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column(
            "user_type_code", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column(
            "sub",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=True,
            comment="From token. Keycloak user id.",
        ),
        sa.Column(
            "iss",
            sa.VARCHAR(length=1024),
            autoincrement=False,
            nullable=True,
            comment="From token. Keycloak base URL.",
        ),
        sa.Column(
            "creation_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_type_code"],
            ["user_type.user_type_code"],
            name="users_user_type_fkey",
        ),
        sa.PrimaryKeyConstraint("user_id", name="users_pkey"),
        sa.UniqueConstraint("sub", name="users_sub_key"),
        sa.UniqueConstraint("username", name="username"),
    )
    op.create_index("ix_users_username", "users", ["username"], unique=False)
    op.create_table(
        "affiliation_status",
        sa.Column(
            "status_code", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "status_name", sa.VARCHAR(length=200), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("status_code", name="affiliation_status_pkey"),
    )
    op.create_table(
        "user_type",
        sa.Column(
            "user_type_code", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "user_type_name", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "full_desc", sa.VARCHAR(length=250), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("user_type_code", name="user_type_pkey"),
    )
    op.drop_table("membership")
    op.drop_index(op.f("ix_org_name"), table_name="org")
    op.drop_index(op.f("ix_org_address"), table_name="org")
    op.drop_table("org")
    op.drop_table("payment_type")
    op.drop_table("org_type")
    op.drop_table("org_status")
    op.drop_table("membership_type")
    op.drop_table("entity")
    # ### end Alembic commands ###
