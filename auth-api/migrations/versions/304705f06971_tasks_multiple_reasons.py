"""tasks_multiple_reasons

Revision ID: 304705f06971
Revises: 41ac4080a7ed
Create Date: 2021-09-10 14:50:36.964423

"""
from typing import List
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import text

from auth_api.models import Task

# revision identifiers, used by Alembic.
revision = '304705f06971'
down_revision = '41ac4080a7ed'
branch_labels = None
depends_on = None


def upgrade():
    # Get the list of existing tasks at first.
    # Wrap the remarks column with "{}", as ARRAY expects this and wont accept string literals as of such.
    # Once all the existing values are turned to array values, alter the column remarks type from character to ARRAY

    conn = op.get_bind()
    task_res = conn.execute("SELECT * FROM tasks WHERE remarks IS NOT NULL;")
    task_list: List[Task] = task_res.fetchall()

    for task in task_list:
        task_id = task.id
        remarks = task.remarks.split(',')  # to handle edge case, where we upgrade, downgrade and then upgrade again
        # Now updating the new remarks value back in the table
        update_sql = text("UPDATE tasks SET remarks = :remarks where id = :task_id") \
            .params(
            remarks=remarks, task_id=task_id)
        op.execute(update_sql)

    # ### alter command auto generated by Alembic ###
    op.alter_column('tasks', 'remarks',
                    existing_type=sa.VARCHAR(length=100),
                    type_=postgresql.ARRAY(sa.String(), dimensions=1),
                    existing_nullable=True,
                    postgresql_using='remarks::character varying(100)[]')
    # ### end Alembic commands ###


def downgrade():
    # We get the list of tasks at first.
    # we convert the type from ARRAY back to character
    # we populate the values back in the table in string form

    conn = op.get_bind()
    task_res = conn.execute("SELECT * FROM tasks WHERE remarks IS NOT NULL;")
    task_list: List[Task] = task_res.fetchall()

    # ### alter command auto generated by Alembic ###
    op.alter_column('tasks', 'remarks',
                    existing_type=postgresql.ARRAY(sa.String(), dimensions=1),
                    type_=sa.VARCHAR(length=250),
                    existing_nullable=True,
                    postgresql_using='remarks::character varying(100)[]')
    # ### end Alembic command ###

    # Now convert values to string
    for task in task_list:
        if isinstance(task.remarks, list):
            task_id = task.id
            old_remarks = task.remarks
            new_remarks = ','.join(old_remarks)
            if new_remarks is not None:
                # Now updating the new remarks value back in the table
                update_sql = text("UPDATE tasks SET remarks = :remarks where id = :task_id") \
                    .params(
                    remarks=new_remarks, task_id=task_id)
                op.execute(update_sql)
