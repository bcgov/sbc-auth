// Edit your app's name below
def APP_NAME = 'auth-web-post-mvp'

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// You shouldn't have to edit these if you're following the conventions
def BUILD_CONFIG = APP_NAME

// You'll need to change this to point to your application component's folder within your repository
def CONTEXT_DIRECTORY = 'auth-web'

// EDIT LINE BELOW
// Add a reference to the RUNTIME_BUILD_CONFIG, if you are using a runtime that needs to be built.
// Otherwise comment out the line and the associated build script.
def RUNTIME_BUILD_CONFIG = "${APP_NAME}-runtime"

//EDIT LINE BELOW (Change `IMAGESTREAM_NAME` so it matches the name of your *output*/deployable image stream.)
def IMAGESTREAM_NAME = "${APP_NAME}-runtime"

// The name of your deployment configuration; used to verify the deployment
def DEPLOYMENT_CONFIG_NAME= "${APP_NAME}-runtime"

@NonCPS
boolean triggerBuild(String contextDirectory) {
  // Determine if code has changed within the source context directory.
  def changeLogSets = currentBuild.changeSets
  def filesChangeCnt = 0
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
      def files = new ArrayList(entry.affectedFiles)
      for (int k = 0; k < files.size(); k++) {
        def file = files[k]
        def filePath = file.path
        //echo ">> ${file.path}"
        if (filePath.contains(contextDirectory)) {
          filesChangeCnt = 1
          k = files.size()
          j = entries.length
        }
      }
    }
  }

  if ( filesChangeCnt < 1 ) {
    echo('The changes do not require a build.')
    return true
  }
  else {
    echo('The changes require a build.')
    return true
  }
}

// Get an image's hash tag
String getImageTagHash(String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

 // create NodeJS pod to run verification steps
    def nodejs_label = "jenkins-nodejs-${UUID.randomUUID().toString()}"
    podTemplate(label: nodejs_label, name: nodejs_label, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-nodejs:8',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            workingDir: '/tmp',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node (nodejs_label) {
            checkout scm
            dir('auth-web') {
                try {
                    sh '''
                        node -v
                        npm install
                    '''
                    stage("Run Jest tests") {
                        def testResults = sh(script: "npm run test:unit", returnStatus: true)

                        echo "Unit tests ran, returned ${testResults}"
                        if (testResults > 0) {
                            try {
                                timeout(time: 1, unit: 'DAYS') {
                                    input message: "Unit tests failed. Continue?", id: "1"
                                }
                            } catch (Exception e) {
                                error('Abort')
                            }
                        }
                    }
                    stage("Check code quality (lint)") {
                        def lintResults = sh(script: "npm run lint:nofix", returnStatus: true)

                        echo "Linter ran, returned ${lintResults}"
                        if (lintResults > 0) {
                            try {
                                timeout(time: 1, unit: 'DAYS') {
                                    input message: "Linter failed. Continue?", id: "2"
                                }
                            } catch (Exception e) {
                                error('Abort')
                            }
                        }
                    }

                } catch (Exception e) {
                    error('Failure')
                }

            }
        }
    }


node {
  if( triggerBuild(CONTEXT_DIRECTORY) ) {

    stage("Build ${BUILD_CONFIG}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Building the application artifacts ..."
            def build = openshift.selector("bc", "${BUILD_CONFIG}")
            build.startBuild().logs("-f")
          }
        }
      }
    }

    // Build the runtime image, if you are not using an off the shelf one.
       stage("Build ${RUNTIME_BUILD_CONFIG}") {
         script {
           try{
             openshift.withCluster() {
               openshift.withProject() {

                 echo "Building the ${RUNTIME_BUILD_CONFIG} image ..."
                 def build = openshift.selector("bc", "${RUNTIME_BUILD_CONFIG}").startBuild()
                 build.untilEach {
                   return it.object().status.phase == "Running"
                 }
                 build.logs('-f')
               }
             }
           } catch (e) {
             echo("BUILD ${RUNTIME_BUILD_CONFIG} ABORTED " +  e.toString())
             error('Stopping earlyâ€¦')
           }
         }
       }

    stage("Deploy ${TAG_NAMES[0]}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Tagging ${IMAGESTREAM_NAME} for deployment to ${TAG_NAMES[0]} ..."

            // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
            // Tag the images for deployment based on the image's hash
            def IMAGE_HASH = getImageTagHash("${IMAGESTREAM_NAME}")
            echo "IMAGE_HASH: ${IMAGE_HASH}"
            openshift.tag("${IMAGESTREAM_NAME}@${IMAGE_HASH}", "${IMAGESTREAM_NAME}:${TAG_NAMES[0]}")
          }
        }
      }
    }
  }
  else {
    stage('No Changes') {
      echo "No changes ..."
      currentBuild.result = 'SUCCESS'
    }
  }
}
