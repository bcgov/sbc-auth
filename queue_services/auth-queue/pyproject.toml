[tool.poetry]
name = "auth-queue"
version = "1.1.0"
description = ""
authors = ["\"BC Registries and Online Services\""]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
blinker = "1.8.2"
charset-normalizer = "3.3.2"
click = "8.1.7"
expiringdict = "1.2.2"
idna = "3.7"
importlib-resources = "5.13.0"
jaeger-client = "4.8.0"
msgpack = "1.0.8"
opentracing = "2.4.0"
pkgutil_resolve_name = "1.3.10"
pyRFC3339 = "1.1"
pyasn1 = "0.6.0"
pyasn1_modules = "0.4.0"
pycountry = "23.12.11"
pyrsistent = "0.20.0"
python-dateutil = "2.9.0.post0"
pytz = "2024.2"
rsa = "4.9"
semver = "3.0.2"
six = "1.16.0"
threadloop = "1.0.2"
thrift = "0.20.0"
urllib3 = "2.2.2"
zipp = "3.19.1"


# VCS dependencies
auth-api = { git = "https://github.com/seeker25/sbc-auth.git", rev = "28735", subdirectory = "auth-api" }
simple-cloudevent = { git = "https://github.com/daxiom/simple-cloudevent.py.git" }
cloud-sql-python-connector = "^1.13.0"

[tool.poetry.group.dev.dependencies]
psycopg2 = "^2.9.9"
pylint = "3.2.3"
coverage = "^5.5"
pylint-flask = "^0.6.0"
pytest = "8.1.1"
pytest-cov = "^2.11.1"
pytest-env = "^0.6.2"
pytest-dotenv = "^0.5.2"
pytest-mock = "^3.5.1"
requests = "^2.25.1"
flake8 = "5.0.4"
flake8-blind-except = "^0.1.1"
flake8-docstrings = "^1.6.0"
flake8-isort = "^4.0.0"
flake8-quotes = "^3.3.0"
pep8-naming = "^0.11.1"
autopep8 = "^1.5.6"
pydocstyle = "^5.1.1"
freezegun = "^1.1.0"
faker = "^8.1.1"
pytest-asyncio = "0.21.0"
mock = "^4.0.3"
lovely-pytest-docker = "^0.3.1"
astroid = "^3.2.3"
flake8-pyproject = "^1.2.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
ignore = ["F401","E402", "Q000", "E203", "W503"]
exclude = [
    ".venv",
    "./venv",
    ".git",
    ".history",
    "devops",
    "*migrations*",
]
per-file-ignores = [
    "__init__.py:F401",
    "*.py:B902"
]
max-line-length = 120
docstring-min-length=10
count = true

[tool.zimports]
black-line-length = 120
keep-unused-type-checking = true

[tool.black]
target-version =  ["py310", "py311", "py312"]
line-length = 120
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  migrations
  | devops
  | .history
)/
'''

[tool.isort]
atomic = true
profile = "black"
line_length = 120
skip_gitignore = true
skip_glob = ["migrations", "devops"]

[tool.pylint.main]
fail-under = 10
max-line-length = 120
ignore = [ "migrations", "devops", "tests"]
ignore-patterns = ["^\\.#"]
ignored-modules= ["flask_sqlalchemy", "sqlalchemy", "SQLAlchemy" , "alembic", "scoped_session"]
ignored-classes= "scoped_session"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
extension-pkg-whitelist = "pydantic"
notes = ["FIXME","XXX","TODO"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = "C0209,C0301,W0511,W0613,W0703,W1514,W1203,R0801,R0902,R0903,R0911,R0401,R1705,R1718,W3101"
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
variable-naming-style = "snake_case"
docstring-min-length = -1
good-names = ["i", "j", "k", "ex", "Run", "_"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]
